#############
# Utilities #
#############

# is $1 installed?
_have() { which "$1" &>/dev/null; }

# Detect which platform we are on
_islinux=false
[[ "$(uname -s)" =~ Linux ]] && _islinux=true
_ismac=false
[[ "$(uname -s)" =~ Darwin ]] && _ismac=true
_isubuntu=false
[[ "$(uname -v)" =~ Ubuntu ]] && _isubuntu=true
_isarch=false
[[ -f /etc/arch-release ]] && _isarch=true
# Detect if gui is running
_isxrunning=false
[[ -n "$DISPLAY" ]] && _isxrunning=true
# Detect if root
_isroot=false
[[ $UID -eq 0 ]] && _isroot=true

########
# Core #
########

# root privileges
alias doas="doas --"

# Directory navigation
alias ..='cd ..'
alias ...='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# vim and emacs
if $_ismac; then
   alias em="/usr/local/bin/emacs -nw"
else
   alias em="/usr/bin/emacs -nw"
fi
alias e=$EDITOR
alias vim="nvim"

#alias emacs="emacsclient -c -a 'emacs'"

# pacman and yay
if _have pacman; then
    alias p="sudo pacman"
    alias paci='sudo pacman -S'               # install
    alias pachi='sudo pacman -Ql'             # Pacman Has Installed - what files where installed in a package
    alias pacs='sudo pacman -Ss'              # search
    alias pacu='sudo pacman -Syu'             # update
    alias pacr='sudo pacman -R'               # remove package but not dependencies
    alias pacrr='sudo pacman -Rs'             # remove package with unused dependencies by other softwares
    alias pacrc='sudo pacman -Sc'             # remove pacman's cache
    alias pacro='pacman -Rns $(pacman -Qtdq)'
    alias pacrl='rm /var/lib/pacman/db.lck'   # pacman remove locks
    alias pacls="sudo pacman -Qe"
    alias pacc='sudo pacman -Sc'
    alias paccc='sudo pacman -Scc'            # empty the whole cache
    alias pacx="sudo pacman --remove"
    alias pacX="sudo pacman --remove --nosave --recursive"
    alias pacsyu='sudo pacman -Syyu'                 # update only standard pkgs
    alias unlock="sudo rm /var/lib/pacman/db.lck"    # remove pacman lock
    alias cleanup='sudo pacman -Rns $(pacman -Qtdq)' # remove orphaned packages
    # For when keys break
    alias archlinx-fix-keys="sudo pacman-key --init && sudo pacman-key --populate archlinux && sudo pacman-key --refresh-keys"
fi

if _have yay; then
    alias yaysua="yay -Sua --noconfirm"              # update only AUR pkgs
    alias yaysyu="yay -Syu --noconfirm"              # update standard pkgs and AUR pkgs
fi

if _have reflector; then
    # get fastest mirrors
    alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
    alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
    alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
    alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"
fi

if _have exa; then
    # Changing "ls" to "exa"
    alias lla='exa -la --color=always --group-directories-first' # list all files long format
    alias lz='exa -al --reverse --sort=size --color=always --group-directories-first' # sort by size
    alias l.='exa -a | egrep "^\."'
    alias ls='exa --color=auto'
    alias lsl='exa -l'
    alias ll='exa -lahF'
    alias lls='exa -lahFtr'
    alias la='exa -a'
else
    alias ls='ls --color=auto'
    alias lsl='ls -l'
    alias ll='ls -lahF'
    alias lls='ls -lahFtr'
    alias la='ls -a'
    alias lla='ls -la --color=always --group-directories-first'  # long format
    alias l.='ls -a | egrep "^\."'
fi

# Colorize grep output (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

alias ag='sag'

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

alias rm30='find * -mtime +30 -exec rm {} \;' # remove files older than 30 days

alias mkdir='mkdir -p'
alias ka='killall'       # Shorten kill all

# adding flags
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias lynx='lynx -cfg=~/.lynx/lynx.cfg -lss=~/.lynx/lynx.lss -vikeys'
alias vifm='./.config/vifm/scripts/vifmrun'

## get top process eating memory
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'

## get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

if _have prettyping; then
    alias ping='prettyping --nolegend'
fi
alias ducks="du -sch .i[!.]* * |sort -rh |head -10" # print top 10 largest files in pwd
alias sps="ps aux | grep -v grep | grep"    # search and display processes by keyword
alias df='df -h'

###########
# Udiskie #
###########
if _have udiskie-mount; then
    alias um='udiskie-mount -r'
    alias uu='udiskie-umount'
    alias up='um -p "builtin:tty"'
fi

#######
# Git #
#######

# Ripped from Prezto
# https://github.com/sorin-ionescu/prezto/tree/master/modules/git

function git-branch-current {
    if ! command git rev-parse 2> /dev/null; then
      print "$0: not a repository: $PWD" >&2
      return 1
    fi

    local ref="$(command git symbolic-ref HEAD 2> /dev/null)"

    if [[ -n "$ref" ]]; then
      print "${ref#refs/heads/}"
      return 0
    else
      return 1
    fi
}

alias g='git'
alias gb='git branch'
alias gc='git commit --verbose'
alias gco='git checkout'
alias gia='git add'
alias gm='git merge'
alias gpp='git pull origin "$(git-branch-current 2> /dev/null)" && git push origin "$(git-branch-current 2> /dev/null)"'
alias gwR='git reset --hard'
alias gwd='git diff --no-ext-diff'
alias gwr='git reset --soft'
alias gws='git status --short'
alias gitignoreall="git status --porcelain | grep '^??' | cut -c4- >> .gitignore"

if _have tig; then
   alias t='tig status'
fi

# cd into git root dir
alias cdr='cd $(git rev-parse --show-toplevel)'

# systemd
alias mach_list_systemctl="systemctl list-unit-files --state=enabled"
alias SS="sudo systemctl"

########
# Misc #
########
alias calcurse="calcurse -D ~/.config/calcurse"
alias http-serve='python -m http.server'
alias bc='bc -lq'
alias utc='env TZ="UTC" date'
alias weath="less -S ${XDG_DATA_HOME:-$HOME/.local/share}/weatherreport"
alias ref="shortcuts >/dev/null; source ${XDG_CONFIG_HOME:-$HOME/.config}/shortcutrc ; source ${XDG_CONFIG_HOME:-$HOME/.config}/zshnameddirrc"
alias path='echo $PATH | tr ":" "\n" | nl' # human readable path
iowaiting() {
    watch -n 1 "(ps aux | awk '\$8 ~ /D/  { print \$0 }')"
}

# Merge Xresources
alias merge='xrdb -merge ~/.Xresources'

# get error messages from journalctl
alias jctl="journalctl -p 3 -xb"

# gpg encryption
# verify signature for isos
alias gpg-check="gpg2 --keyserver-options auto-key-retrieve --verify"
# receive the key of a developer
alias gpg-retrieve="gpg2 --keyserver-options auto-key-retrieve --receive-keys"

# youtube-dl
if _have youtube-dl; then
    alias yta-aac="youtube-dl --extract-audio --audio-format aac "
    alias yta-best="youtube-dl --extract-audio --audio-format best "
    alias yta-flac="youtube-dl --extract-audio --audio-format flac "
    alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
    alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
    alias yta-opus="youtube-dl --extract-audio --audio-format opus "
    alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
    alias yta-wav="youtube-dl --extract-audio --audio-format wav "
    alias ytv-best="youtube-dl -f bestvideo+bestaudio "
fi

# MPV
if _have mpv; then
   # Create a playlist and play all files in directory
   alias mpvplaylist="mpv ./ --idle=once --script-opts=playlistmanager-loadfiles_on_start=yes"
fi

# switch between shells
alias tobash="sudo chsh $USER -s /bin/bash && echo 'Now log out.'"
alias tozsh="sudo chsh $USER -s /bin/zsh && echo 'Now log out.'"
alias tofish="sudo chsh $USER -s /bin/fish && echo 'Now log out.'"

# termbin
alias tb="nc termbin.com 9999"

# cheat
cheat() {
    curl --location --silent "cheat.sh/$1?style=default" | ${PAGER:-less};
}

###############
# Colorscheme #
###############
# Set alacritty terminal colors
LIGHT_COLOR='solarized_light.yaml'
DARK_COLOR='solarized_dark.yaml'

alias day="alacritty-colorscheme -V apply $LIGHT_COLOR"
alias night="alacritty-colorscheme -V apply $DARK_COLOR"
alias toggle="alacritty-colorscheme -V toggle $LIGHT_COLOR $DARK_COLOR"

# Interactively enable sdkman to manage java versions
alias mach_java_mode="export SDKMAN_DIR="$HOME/.sdkman" && [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh""

###############
# X11 Helpers #
###############
alias xpropc='xprop | grep WM_CLASS' # display xprop class

###########
# GO Lang #
###########
alias gob="go build"
alias gor="go run" 
alias goc="go clean -i"
alias gta="go test ./..."       # go test all
alias gia="go install ./..."    # go install all
alias gosrc="$GOPATH/src/" # golang src
alias gobin="$GOPATH/bin/" # golang bin

########
# lynx #
########

alias lynx='lynx -vikeys -accept_all_cookies'

# +--------+
# | docker |
# +--------+
alias dockls="docker container ls | awk '{print $NF}'"                          # display names of running containers
alias dockRr='docker rm $(docker ps -a -q)'                                     # delete every containers / images
alias dockRr='docker rm $(docker ps -a -q) && docker rmi $(docker images -q)'   # delete every containers / images
alias dockstats='docker stats $(docker ps -q)'                                  # stats on images
alias dockimg='docker images'                                                   # list images installed
alias dockprune='docker system prune -a'                                        # prune everything
alias dockceu='docker-compose run --rm -u $(id -u):$(id -g)'                    # run as the host user
alias dockce='docker-compose run --rm'

# +----------------+
# | docker-compose |
# +----------------+

alias docker-compose-dev='docker-compose -f docker-compose-dev.yml' # run a different config file than the default one

# +------+
# | tmux |
# +------+

alias tmuxk='tmux kill-session -t'
alias tmuxa='tmux attach -t'
alias tmuxl='tmux list-sessions'

# +-------+
# | tmuxp |
# +-------+

alias mux='tmuxp load'

alias tf='terraform'

###################
# Rancher Aliases #
###################
function ssh_aws() {
	ssh -o "StrictHostKeyChecking no" -i "${AWS_SSH_PATH}/<your_ssh_key>" -t "ubuntu@${1}" "sudo -s" "${@:2}"
}

function ssh_aws_with_key() {
	ssh -o "StrictHostKeyChecking no" -i "${2}" -t "ubuntu@${1}" "sudo -s" "${@:3}"
}

function scp_aws() {
	scp -i "${AWS_SSH_PATH}/<your_ssh_key>" -r "ubuntu@${1}:${2}" "${3}"
}

function aws_describe_instances() {
	aws ec2 describe-instances "${@:1}"
}

# describe aws instances matching Name tag, can pass additional Name/Value filter combos
function aws_describe_instances_by_name_and_filters() {
	aws_describe_instances --filters Name=tag:Name,Values="${1}" "${@:3}" --region "${2}"
}

# gets the public ips for Rancher nodes with matching "Name" tag and region
function aws_get_node_ips_by_instance_name() {
	aws_describe_instances_by_name_and_filters "${1}" "${2}" "${@:3}" | grep PublicIp: | awk '{print $2}' | uniq
}

function k8s_get_private_node_ips() {
	kubectl get nodes -o custom-columns=NAME:.metadata.name,IP:"{.status.addresses[?(@.type=='InternalIP')].address}" --selector='!monitoring' | awk 'NR > 1 {print $2}'
}

### k3s only
function rcli_reset_password_on_remote() {
	ssh_aws "${1}" "source /etc/profile; export KUBECONFIG=/etc/rancher/k3s/k3s.yaml; kubectl --kubeconfig \$KUBECONFIG -n cattle-system exec \$(kubectl --kubeconfig \$KUBECONFIG -n cattle-system get pods -l app=rancher | grep '1/1' | head -1 | awk '{ print \$1 }') -- reset-password | tail -n 1"
}

function rcli_forward_prometheus() {
	if [ -z "${1}" ]
	then
		kubectl port-forward -n cattle-monitoring-system service/rancher-monitoring-prometheus 8443:9090 "${@:1}"
	else
		kubectl port-forward -n cattle-monitoring-system service/rancher-monitoring-prometheus "${1}":9090 "${@:2}"
	fi

}

function rcli_forward_grafana() {
	if [ -z "${1}" ]
	then
		kubectl port-forward -n cattle-monitoring-system deployment/rancher-monitoring-grafana 8444:3000 "${@:1}"
	else
		kubectl port-forward -n cattle-monitoring-system deployment/rancher-monitoring-grafana "${1}":3000 "${@:2}"
	fi
}

function tfapply_rancher_in_region() {
	local knownsizes;
	local knownregions;
	knownsizes="small medium large xlarge xxlarge"
	knownregions="us-west-1 us-west-2 us-east-1 us-east-2"

	if contains "${knownsizes}" "${1}" ; then

		if contains "${knownregions}" "${2}" ; then
			declare -A SIZE_INSTANCE_MAP
			SIZE_INSTANCE_MAP=( [small]=large [medium]=xlarge [large]=2xlarge [xlarge]=4xlarge [xxlarge]=8xlarge)
			if [ -z "${3}" ]
			then
				tf workspace select "${1}-${2}" && tf apply -var-file="${2}.tfvars" -auto-approve -var="rancher_instance_type=m5.${SIZE_INSTANCE_MAP[$1]}"
			else
				tf workspace new "${3}" || tf workspace select "${3}"
				tf apply -var-file="${3}" -var="aws_region=${2}" -auto-approve -var="rancher_instance_type=m5.${SIZE_INSTANCE_MAP[$1]}" "${@:4}"
			fi
		else
			echo "Requested region not found in known regions."
		fi
	else
		echo "Requested size not found in known sizes."
	fi
}

function tfdestroy_rancher_in_region() {
	local knownsizes;
	local knownregions;
	knownsizes="small medium large xlarge xxlarge"
	knownregions="us-west-1 us-west-2 us-east-1 us-east-2"

	if contains "${knownsizes}" "${1}" ; then

		if contains "${knownregions}" "${2}" ; then
			declare -A SIZE_INSTANCE_MAP
			SIZE_INSTANCE_MAP=( [small]="large" [medium]="xlarge" [large]="2xlarge" [xlarge]="4xlarge" [xxlarge]="8xlarge")
			if [ -z "${3}" ]
			then
				tf workspace select "${1}-${2}" && tf destroy -var-file="${2}.tfvars" -auto-approve -var="rancher_instance_type=m5.${SIZE_INSTANCE_MAP[$1]}"
			else
				tf workspace select "${3}" && tf destroy -var-file="${3}" -var="aws_region=${2}" -auto-approve -var="rancher_instance_type=m5.${SIZE_INSTANCE_MAP[$1]}" "${@:4}" && tf workspace select "default" && tf workspace delete "${3}"
			fi
		else
			echo "Requested region not found in known regions."
		fi
	else
		echo "Requested size not found in known sizes."
	fi
}

function rapi_get_heap_logs() {
    for pod in $(kubectl -n cattle-system get pods --no-headers -l app=rancher | cut -d ' ' -f1); do
        echo getting profile for "${pod}"
        kubectl -n cattle-system exec "${pod}" -- curl -s http://localhost:6060/debug/pprof/heap -o profile.log
        kubectl -n cattle-system cp "${pod}:profile.log" "${pod}-heap.log"
        echo saved profile "${pod}-heap.log"
    done
}

function rapi_set_token_and_url() {
    export TF_VAR_rancher_token_key="${1}"
    export ADMIN_TOKEN="${1}"
    export TF_VAR_rancher_api_url="https://${2}.qa.rancher.space"
    export CATTLE_TEST_URL="https://${2}.qa.rancher.space"
}

function _rapi_get_leader_pod() {
    kubectl -n kube-system get configmap cattle-controllers -o jsonpath='{.metadata.annotations.control-plane\.alpha\.kubernetes\.io/leader}' "${@:1}" | jq '.holderIdentity' | tr -d '"'
}

function rapi_get_leader_node() {
    local leader_pod=$(_rapi_get_leader_pod "${@:1}")
    kubectl -n cattle-system get pod ${leader_pod} -o=custom-columns=NAME:.metadata.name,STATUS:.status.phase,NODE:.spec.nodeName "${@:1}"

}

function rapi_get_monitor_node() {
    kubectl get nodes -l monitoring=yes -o jsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}'
}

function rapi_get_logs() {
    kubectl -n cattle-system logs -l app=rancher -c rancher --timestamps --tail=3600 > rancher_logs.txt
}

function rapi_info_logging() {
    kubectl -n cattle-system get pods -l app=rancher --no-headers -o custom-columns=name:.metadata.name | while read rancherpod; do kubectl -n cattle-system exec $rancherpod -c rancher -- loglevel --set info; done
}

function rapi_debug_logging() {
    kubectl -n cattle-system get pods -l app=rancher --no-headers -o custom-columns=name:.metadata.name | while read rancherpod; do kubectl -n cattle-system exec $rancherpod -c rancher -- loglevel --set debug; done
}

function rapi_trace_logging() {
    kubectl -n cattle-system get pods -l app=rancher --no-headers -o custom-columns=name:.metadata.name | while read rancherpod; do kubectl -n cattle-system exec $rancherpod -c rancher -- loglevel --set trace; done
}

function rapi_rancher_logs() {
    kubectl -n cattle-system logs -l app=rancher -c rancher --follow
}

### kubectl get clusters.management.cattle.io  # find the cluster you want to delete
function rapi_force_delete_downstream() {
    # example: export CLUSTERID="c-xxxxxxxxx"
    export CLUSTERID="${1}"
    kubectl patch clusters.management.cattle.io $CLUSTERID -p '{"metadata":{"finalizers":[]}}' --type=merge
    kubectl delete clusters.management.cattle.io $CLUSTERID
}

### kubectl proxy in separate shell first
function rapi_force_delete_namespace() {
    NAMESPACE="${1}" \
    kubectl get ns $NAMESPACE -o json | \
    jq '.spec.finalizers=[]' | \
    curl -X PUT http://localhost:8001/api/v1/namespaces/$NAMESPACE/finalize -H "Content-Type: application/json" --data @-
}
