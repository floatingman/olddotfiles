[color]
        ui = true
[fetch]
        prune = true
[push]
        default = simple
[diff]
        tool = nvimdiff2
        compactionHeuristic = true
        indentHeuristic = true
        renames = copies

[difftool "nvimdiff2"]
  cmd = nvim -d $LOCAL $REMOTE
  prompt = false

[diff "json"]
        textconv = python -m json.tool

[diff "word"]
        textconv = docx2txt

[alias]
        aa = add --all
        # Amend the currently staged files to the latest commit
        amend = commit --amend --reuse-message=HEAD
        # Clone a repository including all submodules
        c = clone --recursive
        # Commit all changes
        ca = !git add -A && git commit -av
        co = checkout
        cob = checkout -b
        # List contributors with number of commits
        contributors = shortlog --summary --numbered
        # counts how far behind current branch is
        count = "!f() { compareBranch=${1-master}; git rev-list --count HEAD ^$compareBranch; }; f"
        # Credit an author on the latest commit
        credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
        # Show the diff between the latest commit and the current state
        d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
        dc = diff --cached
        # `git di $number` shows the diff between the stat `$number` revisions ago and the current state
        di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
        # Remove branches that have already been merged with master
        # a.k.a. ‘delete merged’
        dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d; git remote -v update -p"
        ds = diff --staged
        # guesses which email address to use for a repo
        email-guess = !. ~/.git-scripts/email-guess.sh
        # Find branches containing commit
        fb = "!f() { git branch -a --contains $1; }; f"
        # Find tags containing commit
        ft = "!f() { git describe --always --contains $1; }; f"
        # Find commits by source code
        fc = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
        # Find commits by commit message
        fm = "!f() { git log --pretty=format:'%C(yellow)%h	%Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
        # Swich to a branch, creating it if necessary
        go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
        # Color graph log view
        graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"
        # View abbreviated SHA, description, and history graphy of the latest 20 commits
        l = log --pretty=oneline -n 20 --graph --abbrev-commit
        lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit
        # Interactive rebase with the given number of latest commits
        reb = "!r() { git rebase -i HEAD~$1; }; r"
        # show remote urls for origin
        rso = remote show origin
        remote-merged = !. ~/.git-scripts/git-remote-merged
        remote-notmerged = !. ~/.git-scripts/git-remote-notmerged
        # View the current working tree status using the short format
        s = status -s
        st = status -sb
        unpushed = log --branches --not --remotes --simplify-by-decoration --decorate --oneline
        # subtree add
        sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"
        # subtree update
        sbu = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"
        # cool trick to use for demos
        next = '!git checkout `git rev-list HEAD..demo-end | tail -1`'
        prev = 'checkout HEAD^'

        # Show verbose output about tags, branches or remotes
        tags = tag -l
        branches = branch -a
        remotes = remote -v

        # Codereview aliases
        change = codereview change
        gofmt = codereview gofmt
        mail = codereview mail
        pending = codereview pending
        submit = codereview submit
        sync = codereview sync

        # from seth vargo https://gist.github.com/sethvargo/6b2f7b592853381690bfe3bd00947e8f
        unreleased = "!f() { git fetch --tags && git diff $(git tag | tail -n 1); }; f"
        up = !git pull origin master && git remote prune origin && git submodule update --init --recursive
        undo = !git reset HEAD~1 --mixed
        top = !git log --format=format:%an | sort | uniq -c | sort -r | head -n 20

        # from trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
        alias=!git config -l | grep ^alias | cut -c 7- | sort

        # from myles borins https://github.com/TheAlphaNerd/Dot-files/blob/master/.gitconfig
        # github broke some workflow... this will make it less painful
        patchit = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am --whitespace=fix; }; f"
        # patchit = "!f() { curl -L $1.patch | git am --whitespace=fix; }; f"
        patchit-please = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am -3 --whitespace=fix; }; f"
        # patchit-please = "!f() { curl -L $1.patch | git am -3 --whitespace=fix; }; f"
[help]
        autocorrect = 1
[core]
        excludesfile = ~/.gitignore
        attributesfile = ~/.gitattributes
        editor = nvim
        trustctime = false
        # Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[color "branch"]
       current = yellow reverse
       local = yellow
       remote = green
[color "diff"]
       meta = yellow bold
       frag = magenta bold
       old = red
       new = green
[color "status"]
       added = yellow
       changed = green
       untracked = cyan

[apply]
        # Detect whitespace errors when applying a patch
        whitespace = fix
[pager]
        diff = diff-so-fancy | less --tabs=4 -RFX
        show = diff-so-fancy | less --tabs=4 -RFX

[merge]
    tool = nvimdiff4
		# Include summaries of merged commits in newly created merge commit messages
		log = true

[mergetool "nvimdiff4"]
    cmd = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[user]
	name = Daniel Newman
	email = dwnewman78@gmail.com

[github]
	user = floatingman
